import tensorflow as tf

class CNN(tf.keras.Model):
    # def __init__(self, num_classes):
    #     super(CNN, self).__init__()
    #     # self.rescaling = tf.keras.layers.Rescaling(1./255)
    #     self.conv1 = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')
    #     self.maxpool1 = tf.keras.layers.MaxPooling2D()
    #     self.conv2 = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')
    #     self.maxpool2 = tf.keras.layers.MaxPooling2D()
    #     self.conv3 = tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu')
    #     self.maxpool3 = tf.keras.layers.MaxPooling2D()
    #     self.flatten = tf.keras.layers.Flatten()
    #     self.dense1 = tf.keras.layers.Dense(128, activation='relu')
    #     self.dense2 = tf.keras.layers.Dense(units = num_classes)

    # def call(self, inputs):
    #     # x = self.rescaling(inputs)
    #     x = self.conv1(inputs)
    #     x = self.maxpool1(x)
    #     x = self.conv2(x)
    #     x = self.maxpool2(x)
    #     x = self.conv3(x)
    #     x = self.maxpool3(x)
    #     x = self.flatten(x)
    #     x = self.dense1(x)
    #     return self.dense2(x)
    
    def __init__(self, num_classes):
        super(CNN, self).__init__()
        # self.rescaling = tf.keras.layers.Rescaling(1./255)
        self.conv1 = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')
        self.maxpool1 = tf.keras.layers.MaxPooling2D()
        self.conv2 = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')
        self.maxpool2 = tf.keras.layers.MaxPooling2D()
        self.conv3 = tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu')
        self.maxpool3 = tf.keras.layers.MaxPooling2D()
        self.flatten = tf.keras.layers.Flatten()
        self.dense1 = tf.keras.layers.Dense(256, activation='relu')
        self.dense2 = tf.keras.layers.Dense(128, activation='relu')
        self.dense3 = tf.keras.layers.Dense(units = num_classes)

    def call(self, inputs):
        # x = self.rescaling(inputs)
        x = self.conv1(inputs)
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = self.maxpool3(x)
        x = self.flatten(x)
        x = self.dense1(x)
        x = self.dense2(x)
        return self.dense3(x)
    
    # def __init__(self, num_classes):
    #     super(CNN, self).__init__()
    #     # self.rescaling = tf.keras.layers.Rescaling(1./255)
    #     self.conv1 = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')
    #     self.maxpool1 = tf.keras.layers.MaxPooling2D()
    #     self.conv2 = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')
    #     self.maxpool2 = tf.keras.layers.MaxPooling2D()
    #     self.conv3 = tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu')
    #     self.maxpool3 = tf.keras.layers.MaxPooling2D()
    #     self.flatten = tf.keras.layers.Flatten()
    #     self.dense1 = tf.keras.layers.Dense(256, activation='relu')
    #     self.dense2 = tf.keras.layers.Dense(128, activation='relu')
    #     self.dense3 = tf.keras.layers.Dense(64, activation='relu')
    #     self.dense4 = tf.keras.layers.Dense(units = num_classes)

    # def call(self, inputs):
    #     # x = self.rescaling(inputs)
    #     x = self.conv1(inputs)
    #     x = self.maxpool1(x)
    #     x = self.conv2(x)
    #     x = self.maxpool2(x)
    #     x = self.conv3(x)
    #     x = self.maxpool3(x)
    #     x = self.flatten(x)
    #     x = self.dense1(x)
    #     x = self.dense2(x)
    #     x = self.dense3(x)
    #     return self.dense4(x)
    
    
    # def __init__(self, num_classes):
    #     super(CNN, self).__init__()
    #     # self.rescaling = tf.keras.layers.Rescaling(1./255)
    #     self.conv1 = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')
    #     self.maxpool1 = tf.keras.layers.MaxPooling2D()
    #     self.conv2 = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')
    #     self.maxpool2 = tf.keras.layers.MaxPooling2D()
    #     self.conv3 = tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu')
    #     self.maxpool3 = tf.keras.layers.MaxPooling2D()
    #     self.conv4 = tf.keras.layers.Conv2D(128, 3, padding='same', activation='relu')
    #     self.maxpool4 = tf.keras.layers.MaxPooling2D()
    #     self.flatten = tf.keras.layers.Flatten()
    #     self.dense1 = tf.keras.layers.Dense(256, activation='relu')
    #     self.dense2 = tf.keras.layers.Dense(128, activation='relu')
    #     self.dense3 = tf.keras.layers.Dense(units = num_classes)

    # def call(self, inputs):
    #     # x = self.rescaling(inputs)
    #     x = self.conv1(inputs)
    #     x = self.maxpool1(x)
    #     x = self.conv2(x)
    #     x = self.maxpool2(x)
    #     x = self.conv3(x)
    #     x = self.maxpool3(x)
    #     x = self.conv4(x)
    #     x = self.maxpool4(x)
    #     x = self.flatten(x)
    #     x = self.dense1(x)
    #     x = self.dense2(x)
    #     return self.dense3(x)